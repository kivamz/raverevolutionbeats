---
// Cart Sidebar Component
const baseUrl = import.meta.env.BASE_URL;
---

<div id="cart-sidebar" class="cart-sidebar">
  <div class="cart-backdrop"></div>
  <div class="cart-content">
    <div class="cart-header">
      <h2>Shopping Cart</h2>
      <button id="close-cart" class="close-btn" aria-label="Close cart">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
    </div>
    
    <div class="cart-body">
      <div id="cart-items" class="cart-items">
        <!-- Cart items will be populated by JavaScript -->
      </div>
      
      <div id="empty-cart" class="empty-cart">
        <svg width="64" height="64" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M3 3H5L5.4 5M7 13H17L21 5H5.4M7 13L5.4 5M7 13L4.7 15.3C4.3 15.7 4.6 16.5 5.1 16.5H17M17 13V16.5M9 19.5A1.5 1.5 0 1 1 12 19.5A1.5 1.5 0 0 1 9 19.5ZM20 19.5A1.5 1.5 0 1 1 17 19.5A1.5 1.5 0 0 1 20 19.5Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
        <h3>Your cart is empty</h3>
        <p>Add some products to get started!</p>
      </div>
    </div>
    
    <div class="cart-footer">
      <div class="cart-total">
        <div class="total-row">
          <span>Subtotal:</span>
          <span id="cart-subtotal">€0.00</span>
        </div>
        <div class="total-row total-final">
          <span>Total:</span>
          <span id="cart-total">€0.00</span>
        </div>
      </div>
      
      <div class="cart-actions">
        <button id="view-cart-btn" class="btn-secondary">View Cart</button>
        <button id="checkout-btn" class="btn-primary">Checkout</button>
      </div>
    </div>
  </div>
</div>

<!-- Pass baseUrl to script -->
<script define:vars={{ baseUrl }}>
  window.CART_BASE_URL = baseUrl;
</script>

<style>
  .cart-sidebar {
    position: fixed;
    top: 0;
    right: 0;
    width: 100%;
    height: 100vh;
    z-index: 9999;
    pointer-events: none;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    
    &.open {
      pointer-events: all;
      opacity: 1;
      visibility: visible;
    }
  }
  
  .cart-backdrop {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(4px);
    opacity: 0;
    transition: opacity 0.3s ease;
    
    .cart-sidebar.open & {
      opacity: 1;
    }
  }
  
  .cart-content {
    position: absolute;
    top: 0;
    right: 0;
    width: 100%;
    max-width: 420px;
    height: 100vh;
    background: linear-gradient(145deg, #1a1a1a 0%, #2a2a2a 100%);
    border-left: 1px solid rgba(255, 255, 255, 0.1);
    display: flex;
    flex-direction: column;
    transform: translateX(100%);
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    
    .cart-sidebar.open & {
      transform: translateX(0);
    }
  }
  
  .cart-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1.5rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    
    h2 {
      margin: 0;
      color: #fff;
      font-size: 1.25rem;
      font-weight: 600;
    }
    
    .close-btn {
      background: none;
      border: none;
      color: rgba(255, 255, 255, 0.7);
      cursor: pointer;
      padding: 0.5rem;
      border-radius: 8px;
      transition: all 0.3s ease;
      
      &:hover {
        color: #fff;
        background: rgba(255, 255, 255, 0.1);
      }
    }
  }
  
  .cart-body {
    flex: 1;
    overflow-y: auto;
    padding: 1rem;
  }
  
  .cart-items {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  .cart-item {
    display: flex;
    gap: 1rem;
    padding: 1rem;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 12px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    
    .item-image {
      width: 60px;
      height: 60px;
      border-radius: 8px;
      object-fit: cover;
      background: rgba(255, 255, 255, 0.1);
    }
    
    .item-details {
      flex: 1;
      
      .item-name {
        color: #fff;
        font-weight: 600;
        margin: 0 0 0.25rem 0;
        font-size: 0.9rem;
      }
      
      .item-variant {
        color: rgba(255, 255, 255, 0.7);
        font-size: 0.8rem;
        margin: 0 0 0.5rem 0;
      }
      
      .item-controls {
        display: flex;
        align-items: center;
        justify-content: space-between;
        
        .quantity-controls {
          display: flex;
          align-items: center;
          gap: 0.5rem;
          
          button {
            width: 28px;
            height: 28px;
            border: none;
            background: rgba(255, 255, 255, 0.1);
            color: #fff;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.3s ease;
            
            &:hover {
              background: rgba(255, 255, 255, 0.2);
            }
            
            &:disabled {
              opacity: 0.5;
              cursor: not-allowed;
            }
          }
          
          .quantity {
            color: #fff;
            font-weight: 600;
            min-width: 20px;
            text-align: center;
          }
        }
        
        .item-price {
          color: #a855f7;
          font-weight: 600;
        }
      }
    }
    
    .remove-item {
      background: none;
      border: none;
      color: rgba(255, 255, 255, 0.5);
      cursor: pointer;
      padding: 0.25rem;
      border-radius: 4px;
      transition: all 0.3s ease;
      
      &:hover {
        color: #ef4444;
        background: rgba(239, 68, 68, 0.1);
      }
    }
  }
  
  .empty-cart {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 3rem 1rem;
    text-align: center;
    color: rgba(255, 255, 255, 0.7);
    
    svg {
      margin-bottom: 1rem;
      opacity: 0.5;
    }
    
    h3 {
      margin: 0 0 0.5rem 0;
      color: #fff;
    }
    
    p {
      margin: 0;
      font-size: 0.9rem;
    }
  }
  
  .cart-footer {
    padding: 1.5rem;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
    background: rgba(0, 0, 0, 0.3);
  }
  
  .cart-total {
    margin-bottom: 1rem;
    
    .total-row {
      display: flex;
      justify-content: space-between;
      margin-bottom: 0.5rem;
      color: rgba(255, 255, 255, 0.8);
      
      &.total-final {
        font-weight: 600;
        font-size: 1.1rem;
        color: #fff;
        padding-top: 0.5rem;
        border-top: 1px solid rgba(255, 255, 255, 0.2);
        margin-top: 0.5rem;
        margin-bottom: 0;
      }
    }
  }
  
  .cart-actions {
    display: flex;
    gap: 0.75rem;
    
    button {
      flex: 1;
      padding: 0.875rem 1rem;
      border: none;
      border-radius: 10px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      
      &.btn-secondary {
        background: rgba(255, 255, 255, 0.1);
        color: #fff;
        border: 1px solid rgba(255, 255, 255, 0.2);
        
        &:hover {
          background: rgba(255, 255, 255, 0.15);
          border-color: rgba(255, 255, 255, 0.3);
        }
      }
      
      &.btn-primary {
        background: linear-gradient(135deg, #a855f7 0%, #6366f1 100%);
        color: #fff;
        
        &:hover {
          background: linear-gradient(135deg, #9333ea 0%, #4f46e5 100%);
          transform: translateY(-1px);
        }
        
        &:disabled {
          opacity: 0.5;
          cursor: not-allowed;
          transform: none;
        }
      }
    }
  }
  
  @media (max-width: 480px) {
    .cart-content {
      max-width: 100%;
    }
    
    .cart-header {
      padding: 1rem;
    }
    
    .cart-body {
      padding: 0.75rem;
    }
    
    .cart-footer {
      padding: 1rem;
    }
  }
</style>

<script>
  // Cart sidebar functionality
  function initCartSidebar() {
    const cartSidebar = document.getElementById('cart-sidebar');
    const cartBackdrop = cartSidebar?.querySelector('.cart-backdrop');
    const closeCartBtn = document.getElementById('close-cart');
    const cartToggle = document.querySelector('.cart-toggle');
    const cartItemsContainer = document.getElementById('cart-items');
    const emptyCartContainer = document.getElementById('empty-cart');
    const cartSubtotal = document.getElementById('cart-subtotal');
    const cartTotal = document.getElementById('cart-total');
    const viewCartBtn = document.getElementById('view-cart-btn');
    const checkoutBtn = document.getElementById('checkout-btn');

    // Helper functions
    function getCart() {
      try {
        const cart = localStorage.getItem('cart');
        return cart ? JSON.parse(cart) : [];
      } catch (error) {
        console.error('Error getting cart:', error);
        return [];
      }
    }

    function saveCart(cart) {
      try {
        localStorage.setItem('cart', JSON.stringify(cart));
        window.dispatchEvent(new CustomEvent('cartUpdated', { detail: cart }));
      } catch (error) {
        console.error('Error saving cart:', error);
      }
    }

    function formatPrice(price, currency = "EUR") {
      const safeCurrency = currency && typeof currency === 'string' ? currency : "EUR";
      return new Intl.NumberFormat("es-ES", {
        style: "currency",
        currency: safeCurrency
      }).format(parseFloat(price));
    }

    // Open cart sidebar
    function openCart() {
      cartSidebar?.classList.add('open');
      document.body.style.overflow = 'hidden';
      updateCartDisplay();
    }

    // Close cart sidebar
    function closeCart() {
      cartSidebar?.classList.remove('open');
      document.body.style.overflow = '';
    }

    // Update cart display
    function updateCartDisplay() {
      const cart = getCart();
      const isEmpty = cart.length === 0;
      
      if (cartItemsContainer) cartItemsContainer.style.display = isEmpty ? 'none' : 'flex';
      if (emptyCartContainer) emptyCartContainer.style.display = isEmpty ? 'flex' : 'none';
      
      if (!isEmpty) {
        renderCartItems(cart);
        updateCartTotals(cart);
      }
      
      // Update checkout button state
      if (checkoutBtn) {
        checkoutBtn.disabled = isEmpty;
      }
    }    // Render cart items
    function renderCartItems(cart) {
      if (!cartItemsContainer) return;
      
      cartItemsContainer.innerHTML = cart.map(item => `
        <div class="cart-item" data-product-id="${item.productId || item.id}" data-variant-id="${item.variantId}">
          <img src="${item.thumbnail || item.image || '/placeholder.jpg'}" alt="${item.name}" class="item-image">
          <div class="item-details">
            <h4 class="item-name">${item.name}</h4>
            <p class="item-variant">${item.color ? `${item.color}` : ''}${item.size ? ` - ${item.size}` : ''}</p>
            <div class="item-controls">
              <div class="quantity-controls">
                <button onclick="updateCartItemQuantity('${item.productId || item.id}', '${item.variantId}', ${item.quantity - 1})">-</button>
                <span class="quantity">${item.quantity}</span>
                <button onclick="updateCartItemQuantity('${item.productId || item.id}', '${item.variantId}', ${item.quantity + 1})">+</button>
              </div>
              <span class="item-price">${formatPrice(item.price * item.quantity, item.currency)}</span>
            </div>
          </div>
          <button class="remove-item" onclick="removeCartItem('${item.productId || item.id}', '${item.variantId}')" aria-label="Remove item">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
          </button>
        </div>
      `).join('');
    }

    // Update cart totals
    function updateCartTotals(cart) {
      const subtotal = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
      const total = subtotal; // Add tax calculation if needed
      const currency = cart.length > 0 ? cart[0].currency : 'EUR';
      
      if (cartSubtotal) cartSubtotal.textContent = formatPrice(subtotal, currency);
      if (cartTotal) cartTotal.textContent = formatPrice(total, currency);
    }

    // Remove item from cart
    function removeCartItem(productId, variantId) {
      const cart = getCart();
      const updatedCart = cart.filter(item => !((item.productId || item.id) === productId && item.variantId === variantId));
      saveCart(updatedCart);
      updateCartDisplay();
    }

    // Event listeners
    cartToggle?.addEventListener('click', openCart);
    closeCartBtn?.addEventListener('click', closeCart);
    cartBackdrop?.addEventListener('click', closeCart);
      viewCartBtn?.addEventListener('click', () => {
      closeCart();
      // Use the base URL passed from Astro
      const baseUrl = window.CART_BASE_URL || '/';
      window.location.href = `${baseUrl}cart/`;
    });
    
    checkoutBtn?.addEventListener('click', () => {
      const cart = getCart();
      if (cart.length > 0) {
        alert('Checkout functionality coming soon!');
      }
    });

    // Make functions available globally for inline event handlers
    window.updateCartItemQuantity = function(productId, variantId, newQuantity) {
      if (newQuantity <= 0) {
        removeCartItem(productId, variantId);
      } else {
        const cart = getCart();
        const item = cart.find(item => (item.productId || item.id) === productId && item.variantId === variantId);
        if (item) {
          item.quantity = newQuantity;
          saveCart(cart);
          updateCartDisplay();
        }
      }
    };

    window.removeCartItem = removeCartItem;

    // Listen for cart updates from other parts of the app
    window.addEventListener('cartUpdated', updateCartDisplay);

    // Make open/close functions globally available
    window.openCart = openCart;
    window.closeCart = closeCart;

    // Escape key to close cart
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && cartSidebar?.classList.contains('open')) {
        closeCart();
      }
    });

    // Initial cart display update
    updateCartDisplay();
  }

  // Initialize when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initCartSidebar);
  } else {
    initCartSidebar();
  }
</script>
