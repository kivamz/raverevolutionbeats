---
import Layout from '../../../components/Layout.astro';
import "../../../styles/product-detail.scss";

// Objeto fallback para el color, en caso de que una variante no tenga color_code.
const colorMap = {
  "white": "#FFFFFF",
  "black": "#000000",
  "navy": "#000080",
  "purple": "#800080",
  "red": "#FF0000",
  "royal": "#4169E1",
  "charcoal": "#36454F",
  "heliconia": "#F77F00",
  "irish green": "#008000",
  "rs sport grey": "#A9A9A9",
  "azalea": "#F3C5D5"
};

// getStaticPaths utiliza solo PRINTFUL_ACCESS_TOKEN.
export async function getStaticPaths() {
  const slugify = (str) =>
    str.trim().toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');
  const { PRINTFUL_API_BASE, PRINTFUL_ACCESS_TOKEN } = import.meta.env;
  if (!PRINTFUL_API_BASE || !PRINTFUL_ACCESS_TOKEN) return [];
  try {
    const response = await fetch(`${PRINTFUL_API_BASE}store/products`, {
      headers: {
        "Authorization": `Bearer ${PRINTFUL_ACCESS_TOKEN}`,
        "Content-Type": "application/json"
      }
    });
    const data = await response.json();
    return data.result.map((product) => ({
      params: { slug: `${product.id}-${slugify(product.name)}` }
    }));
  } catch (error) {
    console.error("Error generando rutas estáticas:", error);
    return [];
  }
}

const { slug } = Astro.params;
const productId = slug.split('-')[0];

const { PRINTFUL_API_BASE, PRINTFUL_ACCESS_TOKEN } = import.meta.env;
if (!PRINTFUL_API_BASE || !PRINTFUL_ACCESS_TOKEN)
  throw new Error(".env incompleto");

const formatEuro = (value, currency = "EUR") =>
  new Intl.NumberFormat("es-ES", { style: "currency", currency }).format(value);

// Función para obtener la información completa de una variante usando GET /products/variant/{id}.
// Se usa variant.variant_id si existe; de lo contrario, se usa variant.id.
async function getVariantComplete(id) {
  try {
    const res = await fetch(`${PRINTFUL_API_BASE}products/variant/${id}`, {
      headers: {
        "Authorization": `Bearer ${PRINTFUL_ACCESS_TOKEN}`,
        "Content-Type": "application/json"
      }
    });
    const json = await res.json();
    if (json && json.code === 200 && json.result && json.result.variant) {
      return json.result.variant;
    }
    console.error("Respuesta inesperada para la variante", id, json);
    return undefined;
  } catch (error) {
    console.error("Error en getVariantComplete:", error);
    return undefined;
  }
}

let product = null;
try {
  // Obtenemos el producto básico y sus variantes sincronizadas.
  const res = await fetch(`${PRINTFUL_API_BASE}store/products/${productId}`, {
    headers: {
      "Authorization": `Bearer ${PRINTFUL_ACCESS_TOKEN}`,
      "Content-Type": "application/json"
    }
  });
  const data = await res.json();
  product = data.result?.sync_product || null;
  if (product) {
    const basicVariants = data.result.sync_variants?.length ? data.result.sync_variants : [];
    // Se enriquecen las variantes: Si el endpoint devuelve datos enriquecidos, se fusiona copiendo el precio básico.
    product.variants = await Promise.all(
      basicVariants.map(async (variant) => {
        const idToUse = variant.variant_id ? variant.variant_id : variant.id;
        const fullVariant = await getVariantComplete(idToUse);
        return fullVariant
          ? { ...fullVariant, retail_price: variant.retail_price, price: variant.price }
          : variant;
      })
    );
  }
} catch (error) {
  console.error("Error obteniendo producto:", error);
}

let uniqueColorVariants = [];
let uniqueSizes = [];
if (product?.variants?.length) {
  const colorDict = {};
  const sizeSet = new Set();
  product.variants.forEach(v => {
    if (v.color) {
      const key = v.color.trim().toLowerCase();
      if (!colorDict[key]) colorDict[key] = v;
    }
    if (v.size) sizeSet.add(v.size.trim());
  });
  uniqueColorVariants = Object.values(colorDict);
  uniqueSizes = Array.from(sizeSet);
}
---
<Layout>
  <section class="product-detail">
    <div class="container">
      {product ? (
        <>
          <div class="product-header">
            <h1 class="product-title">{product.name}</h1>
            {product.description && <p class="product-description">{product.description}</p>}
          </div>
          <div class="product-flex">
            <div class="image-container">
              {product.thumbnail_url && (
                <img id="main-product-image" src={product.thumbnail_url} alt={product.name} />
              )}
            </div>
            <aside class="options-sidebar">
              {uniqueColorVariants.length > 0 && (
                <div class="option-group colors">
                  <h2>Color</h2>
                  <div class="color-options">
                    {uniqueColorVariants.map(variant => (
                      <div
                        class="color-swatch"
                        data-color={variant.color}
                        style={{
                          backgroundColor: variant.color_code
                            ? variant.color_code
                            : (colorMap[variant.color.toLowerCase()] || variant.color)
                        }}
                        title={variant.color}>
                      </div>
                    ))}
                  </div>
                </div>
              )}
              {uniqueSizes.length > 0 && (
                <div class="option-group sizes">
                  <h2>Size</h2>
                  <div class="size-options">
                    {uniqueSizes.map(size => (
                      <div class="size-option" data-size={size}>{size}</div>
                    ))}
                  </div>
                </div>
              )}
              <div class="price-display">
                <span id="selected-price">
                  {product.variants.length > 0 &&
                    formatEuro(
                      Math.min(...product.variants.map(v => parseFloat(v.retail_price || v.price || "0"))),
                      product.variants[0].currency || "EUR"
                    )}
                </span>
              </div>
              <button id="add-to-cart" class="add-to-cart" disabled>
                Add to Cart
              </button>
            </aside>
          </div>
          <!-- Incrustamos el JSON en una sola línea para asegurar que sea válido -->
          <script id="variants-data" type="application/json">{JSON.stringify(product.variants || [])}</script>
        </>
      ) : (
        <p>Producto no encontrado.</p>
      )}
    </div>
  </section>
  
  <div id="modal" class="modal">
    <span id="modal-close" class="modal-close">&times;</span>
    <img class="modal-content" id="modal-image" alt="Enlarged Image" />
  </div>
  
  <script type="module">
    document.addEventListener("DOMContentLoaded", () => {
      const modal = document.getElementById("modal");
      if (modal) modal.style.display = "none";
  
      const variantsDataEl = document.getElementById("variants-data");
      let variants = [];
      if (variantsDataEl) {
        try {
          variants = JSON.parse(variantsDataEl.textContent.trim());
        } catch (e) {
          console.error("Error parseando JSON de variantes", e);
        }
      }
  
      let selectedColor = null, selectedSize = null;
  
      const updateUI = () => {
        const priceEl = document.getElementById("selected-price");
        const imgEl = document.getElementById("main-product-image");
        if (!variants.length) return;
        if (selectedColor && selectedSize) {
          const variant = variants.find(v => {
            const variantColor = v.color ? v.color.trim().toLowerCase() : "";
            const variantSize = v.size ? v.size.trim().toLowerCase() : "";
            return variantColor === selectedColor.trim().toLowerCase() &&
                   variantSize === selectedSize.trim().toLowerCase();
          });
          if (variant && imgEl && priceEl) {
            priceEl.textContent = new Intl.NumberFormat("es-ES", {
              style: "currency",
              currency: variant.currency || "EUR"
            }).format(parseFloat(variant.retail_price));
            imgEl.src = variant.thumbnail_url;
          } else {
            const lowestPrice = Math.min(...variants.map(v => parseFloat(v.retail_price || v.price || "0")));
            priceEl.textContent = new Intl.NumberFormat("es-ES", {
              style: "currency",
              currency: variants[0].currency || "EUR"
            }).format(lowestPrice);
          }
        } else {
          const lowestPrice = Math.min(...variants.map(v => parseFloat(v.retail_price || v.price || "0")));
          priceEl.textContent = new Intl.NumberFormat("es-ES", {
            style: "currency",
            currency: variants[0].currency || "EUR"
          }).format(lowestPrice);
        }
  
        const addBtn = document.getElementById("add-to-cart");
        if (selectedColor && selectedSize) {
          addBtn.disabled = false;
          addBtn.style.opacity = 1;
        } else {
          addBtn.disabled = true;
          addBtn.style.opacity = 0.5;
        }
      };
  
      document.querySelectorAll(".color-swatch").forEach(swatch => {
        swatch.addEventListener("click", () => {
          document.querySelectorAll(".color-swatch").forEach(el => el.classList.remove("selected"));
          swatch.classList.add("selected");
          selectedColor = swatch.dataset.color;
          updateUI();
        });
      });
  
      document.querySelectorAll(".size-option").forEach(opt => {
        opt.addEventListener("click", () => {
          document.querySelectorAll(".size-option").forEach(el => el.classList.remove("selected"));
          opt.classList.add("selected");
          selectedSize = opt.dataset.size;
          updateUI();
        });
      });
  
      updateUI();
  
      const modalImg = document.getElementById("modal-image");
      const modalCloseElem = document.getElementById("modal-close");
      const mainImg = document.getElementById("main-product-image");
      if (mainImg) {
        mainImg.addEventListener("click", () => {
          modal.style.display = "flex";
          modalImg.src = mainImg.src;
        });
      }
  
      if (modalCloseElem) {
        modalCloseElem.addEventListener("click", () => {
          modal.style.display = "none";
        });
      }
      if (modal) {
        modal.addEventListener("click", (e) => {
          if (e.target === modal) {
            modal.style.display = "none";
          }
        });
      }
    });
  </script>
</Layout>
