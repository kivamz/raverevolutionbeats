---
import ProductLayout from '../../../components/ProductLayout.astro';
import { getSafeImageSrc, createImageErrorHandler } from '../../../utils/image-utils';

// Objeto fallback para el color.
const colorMap = {
  "white": "#FFFFFF",
  "black": "#000000",
  "navy": "#000080",
  "purple": "#800080",
  "red": "#FF0000",
  "royal": "#4169E1",
  "charcoal": "#36454F",
  "heliconia": "#F77F00",
  "irish green": "#008000",
  "rs sport grey": "#A9A9A9",
  "azalea": "#F3C5D5"
};

// getStaticPaths utiliza solo PRINTFUL_ACCESS_TOKEN.
export async function getStaticPaths() {
  const slugify = (str: string) =>
    str
      .trim()
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/(^-|-$)/g, '');
      
  const PRINTFUL_API_BASE = import.meta.env.PRINTFUL_API_BASE;
  const PRINTFUL_ACCESS_TOKEN = import.meta.env.PRINTFUL_ACCESS_TOKEN;
    if (!PRINTFUL_API_BASE || !PRINTFUL_ACCESS_TOKEN) {
    console.warn("Missing Printful API credentials for getStaticPaths - using fallback");
    // Return fallback paths for development/production without API
    return [
      { params: { slug: "384392155-short-unisex-t-shirt" } },
      { params: { slug: "384293541-unisex-hoodie" } },
      { params: { slug: "384293385-women-s-t-shirt" } }
    ];
  }
  
  try {
    const response = await fetch(`${PRINTFUL_API_BASE}store/products`, {
      headers: {
        "Authorization": `Bearer ${PRINTFUL_ACCESS_TOKEN}`,
        "Content-Type": "application/json"
      }
    });
      if (!response.ok) {
      console.error("Failed to fetch products for getStaticPaths:", response.status);
      // Return fallback paths instead of empty array
      return [
        { params: { slug: "384392155-short-unisex-t-shirt" } },
        { params: { slug: "384293541-unisex-hoodie" } },
        { params: { slug: "384293385-women-s-t-shirt" } }
      ];
    }
    
    const data = await response.json();
    
    if (data.result && data.result.length > 0) {
      const paths = data.result.map((product: any) => {
        const slug = `${product.id}-${slugify(product.name)}`;
        return { params: { slug } };
      });
      return paths;    } else {
      console.warn("No products found for getStaticPaths - using fallback");
      return [
        { params: { slug: "384392155-short-unisex-t-shirt" } },
        { params: { slug: "384293541-unisex-hoodie" } },
        { params: { slug: "384293385-women-s-t-shirt" } }
      ];
    }  } catch (error) {
    console.error("Error in getStaticPaths:", error);
    // Return fallback paths instead of empty array
    return [
      { params: { slug: "384392155-short-unisex-t-shirt" } },
      { params: { slug: "384293541-unisex-hoodie" } },
      { params: { slug: "384293385-women-s-t-shirt" } }
    ];
  }
}

const { slug } = Astro.params;

if (!slug || typeof slug !== 'string') {
  throw new Error("Parámetro slug no válido");
}

const productId = (slug as string).split('-')[0];

const { PRINTFUL_API_BASE, PRINTFUL_ACCESS_TOKEN } = import.meta.env;
if (!PRINTFUL_API_BASE || !PRINTFUL_ACCESS_TOKEN) {
  console.warn(".env variables missing - using fallback data");
  // Don't throw error, just log warning
}

const formatEuro = (value: any, currency = "EUR") => {
  // More robust currency validation
  let safeCurrency = "EUR";
  if (currency && typeof currency === 'string' && currency.trim().length === 3) {
    safeCurrency = currency.trim().toUpperCase();
  }
  
  try {
    return new Intl.NumberFormat("es-ES", {
      style: "currency",
      currency: safeCurrency
    }).format(parseFloat(value));
  } catch (error) {
    console.warn('Error formatting price with currency:', currency, 'Using EUR fallback');
    return new Intl.NumberFormat("es-ES", {
      style: "currency",
      currency: "EUR"
    }).format(parseFloat(value));
  }
};

// Función para obtener variante enriquecida (GET /products/variant/{id}).
async function getVariantComplete(id: any) {
  try {
    const res = await fetch(`${PRINTFUL_API_BASE}products/variant/${id}`, {
      headers: {
        "Authorization": `Bearer ${PRINTFUL_ACCESS_TOKEN}`,
        "Content-Type": "application/json"
      }
    });
    const json = await res.json();
    if (json && json.code === 200 && json.result && json.result.variant) {
      return json.result.variant;
    }
    return undefined;
  } catch (error) {
    console.error("Error en getVariantComplete:", error);
    return undefined;
  }
}

let product = null;
try {
  // Only try to fetch if we have API credentials
  if (PRINTFUL_API_BASE && PRINTFUL_ACCESS_TOKEN) {
    const res = await fetch(`${PRINTFUL_API_BASE}store/products/${productId}`, {
      headers: {
        "Authorization": `Bearer ${PRINTFUL_ACCESS_TOKEN}`,
        "Content-Type": "application/json"
      }
    });
    const data = await res.json();
    product = data.result?.sync_product || null;
    if (product) {
      const basicVariants = data.result.sync_variants || [];
      product.sync_variants = basicVariants; // Guardamos fallback.
      
      // En lugar de reemplazar completamente las variantes, vamos a enriquecerlas
      // manteniendo las URLs de imagen de las sync_variants originales
      product.variants = await Promise.all(
        basicVariants.map(async (variant: any) => {
          const idToUse = variant.variant_id ? variant.variant_id : variant.id;
          const fullVariant = await getVariantComplete(idToUse);
            // Combinamos la información completa con las URLs originales
        const combinedVariant = fullVariant
          ? { 
              ...fullVariant, 
              retail_price: variant.retail_price, 
              price: variant.price,
              // Preservamos las URLs de imagen de las sync_variants
              preview_url: variant.preview_url,
              thumbnail_url: variant.thumbnail_url,
              // También incluimos los archivos si existen
              files: variant.files
            }
          : variant;
        
        return combinedVariant;
      })
    );
      if (!product.variants.length && basicVariants.length) {
      product.variants = basicVariants;
    }
    }
  } else {
    // Fallback when no API credentials
    console.warn("No API credentials available, using fallback product data");
    product = {
      id: parseInt(productId),
      name: "Product",
      description: "Product description not available",
      thumbnail_url: "https://via.placeholder.com/400x400/000000/ffffff?text=Product",
      variants: [],
      sync_variants: []
    };
  }
} catch (error) {
  console.error("Error obteniendo producto:", error);
  // Fallback product data in case of error
  if (!product) {
    product = {
      id: parseInt(productId),
      name: "Product",
      description: "Product description not available", 
      thumbnail_url: "https://via.placeholder.com/400x400/000000/ffffff?text=Product",
      variants: [],
      sync_variants: []
    };
  }
}

let uniqueColorVariants: any[] = [];
let uniqueSizes: string[] = [];
if (product?.variants?.length) {
  const colorDict: any = {};
  const sizeSet = new Set<string>();
  product.variants.forEach((v: any) => {
    if (v.color) {
      const key = v.color.trim().toLowerCase();
      if (!colorDict[key]) colorDict[key] = v;
    }
    if (v.size) sizeSet.add(v.size.trim());
  });
  uniqueColorVariants = Object.values(colorDict);
  uniqueSizes = Array.from(sizeSet);
}

// Preparar datos para el script
const variantsData = (product?.variants && product.variants.length) ? product.variants : (product?.sync_variants || []);
const productData = product || {};
---
<ProductLayout>
  <section class="product-detail">
    <div class="container">
      {product ? (
        <>
          <div class="product-header">
            <h1 class="product-title">{product.name}</h1>
            {product.description && <p class="product-description">{product.description}</p>}
          </div>          <div class="product-flex">            <div class="image-gallery">
              <div class="main-image-container">                {product.thumbnail_url && (
                  <img 
                    id="main-product-image" 
                    src={getSafeImageSrc(product.thumbnail_url, product.name, 500, 500)} 
                    alt={product.name}
                    onerror={createImageErrorHandler(product.name, 500, 500)}
                    loading="eager"
                    data-fallback-level=""
                  />
                )}
              </div>
              <div class="thumbnails-container">
                <div id="thumbnail-container" class="thumbnails-grid">
                  <!-- Las miniaturas se cargarán dinámicamente -->
                </div>
              </div>
            </div>
            <aside class="options-sidebar">
              {uniqueColorVariants.length > 0 && (
                <div class="option-group colors">
                  <h2>Color</h2>
                  <div class="color-options">
                    {uniqueColorVariants.map(variant => (
                      <div
                        class="color-swatch"
                        data-color={variant.color}                        style={{
                          backgroundColor: variant.color_code
                            ? variant.color_code
                            : (colorMap[variant.color?.toLowerCase() as keyof typeof colorMap] || variant.color)
                        }}
                        title={variant.color}>
                      </div>
                    ))}
                  </div>
                </div>
              )}
              {uniqueSizes.length > 0 && (
                <div class="option-group sizes">
                  <h2>Size</h2>
                  <div class="size-options">
                    {uniqueSizes.map(size => (
                      <div class="size-option" data-size={size}>
                        {size}
                      </div>
                    ))}
                  </div>
                </div>
              )}
              <div class="price-display">
                <span id="selected-price">                  {product.variants.length > 0 &&                    formatEuro(
                      Math.min(...product.variants.map((v: any) => parseFloat(v.retail_price || v.price || "0"))),
                      product.variants[0]?.currency || "EUR"
                    )}
                </span>
              </div>              <button id="add-to-cart" class="add-to-cart" disabled>Add to Cart</button>
              <!-- Mensaje de confirmación mejorado -->
              <div id="cart-message" class="cart-success-message" style="display: none;">
                <i class="fas fa-check-circle"></i>
                <span>Added to cart!</span>
              </div>
            </aside>
          </div>          <!-- Datos para el script -->
          <script define:vars={{ variantsData, productData, productId }}>
            window.productPageData = {
              variants: variantsData,
              product: productData,
              productId: productId
            };
          </script>
        </>
      ) : (
        <p>Producto no encontrado.</p>
      )}
    </div>
  </section>
  
  <div id="modal" class="modal">
    <span id="modal-close" class="modal-close">&times;</span>
    <img class="modal-content" id="modal-image" alt="Enlarged Image" />
  </div>    <script type="module">
    document.addEventListener("DOMContentLoaded", () => {
      // Configuración del modal
      const modal = document.getElementById("modal");
      if (modal) modal.style.display = "none";

      // Recuperar datos desde window
      const pageData = window.productPageData || {};
      let variants = pageData.variants || [];
      let product = pageData.product || {};
      let productId = pageData.productId || "";

      // Fallback: si variants es vacío, usar product.sync_variants si existe
      if (!variants.length && product.sync_variants && product.sync_variants.length) {
        variants = product.sync_variants;
      }

      if (!variants.length) {
        console.error("No hay variantes disponibles");
        return;
      }

      let selectedColor = null;
      let selectedSize = null;      // Función para obtener todas las imágenes de una variante
      const getVariantImages = (variant) => {
        const images = [];
        
        if (variant.files && variant.files.length > 0) {
          // Solo tomar archivos de tipo 'preview' que muestran el producto completo
          variant.files.forEach(file => {
            if (file.type === 'preview' && file.preview_url) {
              images.push({
                url: file.preview_url,
                thumbnail: file.thumbnail_url || file.preview_url,
                type: file.type
              });
            }
          });
        }
        
        // Si no hay archivos de preview, usar URLs directas si existen
        if (images.length === 0) {
          if (variant.preview_url) {
            images.push({
              url: variant.preview_url,
              thumbnail: variant.thumbnail_url || variant.preview_url,
              type: 'default'
            });
          } else if (variant.thumbnail_url) {
            images.push({
              url: variant.thumbnail_url,
              thumbnail: variant.thumbnail_url,
              type: 'default'
            });
          }
        }
        
        return images;
      };      // Variables globales para el manejo de la galería
      let allAvailableImages = [];
      let currentMainImage = null;

      // Función para recopilar todas las imágenes disponibles del producto
      const collectAllImages = () => {
        const imageMap = new Map();
        
        variants.forEach(variant => {
          const images = getVariantImages(variant);
          images.forEach(img => {
            if (!imageMap.has(img.url)) {
              imageMap.set(img.url, {
                ...img,
                color: variant.color,
                variantId: variant.id
              });
            }
          });
        });
        
        return Array.from(imageMap.values());
      };      // Función para actualizar la imagen principal con mejor manejo de errores
      const updateMainImage = (imageData) => {
        const mainImg = document.getElementById("main-product-image");
        if (mainImg && imageData) {
          // Añadir clase de carga
          mainImg.classList.add('loading');
          mainImg.classList.remove('loaded');
          
          // Usar las funciones de utilidad para obtener una URL segura
          const safeImageUrl = imageData.url || `https://via.placeholder.com/500x500/1a1a1a/ffffff?text=${encodeURIComponent(product.name || 'Product')}`;
          
          // Crear nueva imagen para precargar
          const newImg = new Image();
          newImg.onload = function() {
            mainImg.src = this.src;
            mainImg.classList.remove('loading');
            mainImg.classList.add('loaded');
            currentMainImage = imageData;
            updateThumbnailGallery();
          };
          newImg.onerror = function() {
            // Fallback mejorado con múltiples niveles
            let fallbackLevel = mainImg.dataset.fallbackLevel || '';
            const productName = encodeURIComponent(product.name || 'Product');
            
            if (fallbackLevel !== 'final') {
              mainImg.dataset.fallbackLevel = fallbackLevel === 'first' ? 'final' : 'first';
              const fallbackUrl = fallbackLevel === 'first' 
                ? `https://via.placeholder.com/500x500/333333/ffffff?text=${productName}`
                : `https://via.placeholder.com/500x500/1a1a1a/ffffff?text=Image+Not+Found`;
              
              mainImg.src = fallbackUrl;
              mainImg.classList.remove('loading');
              console.warn('Error loading image, trying fallback:', imageData.url);
            } else {
              mainImg.classList.remove('loading');
              console.error('All image fallbacks failed for:', imageData.url);
            }
          };
          newImg.src = safeImageUrl;
        }
      };

      // Función para actualizar la galería de miniaturas (mejorada)
      const updateThumbnailGallery = (filterByColor = null) => {
        const thumbnailContainer = document.getElementById("thumbnail-container");
        if (!thumbnailContainer) return;
        
        // Limpiar miniaturas existentes
        thumbnailContainer.innerHTML = "";
        
        let imagesToShow = [];
        
        if (filterByColor) {
          // Filtrar imágenes por color seleccionado
          const colorImages = allAvailableImages.filter(img => 
            img.color && img.color.trim().toLowerCase() === filterByColor.trim().toLowerCase()
          );
          
          // Si hay múltiples imágenes del color seleccionado, usarlas
          if (colorImages.length > 1) {
            imagesToShow = colorImages;
          } else if (colorImages.length === 1) {
            // Si solo hay una imagen de ese color, mostrar también algunas otras para dar contexto
            const otherImages = allAvailableImages.filter(img => 
              !img.color || img.color.trim().toLowerCase() !== filterByColor.trim().toLowerCase()
            ).slice(0, 3); // Máximo 3 imágenes adicionales
            imagesToShow = [...colorImages, ...otherImages];
          } else {
            // Si no hay imágenes del color seleccionado, mostrar todas
            imagesToShow = allAvailableImages;
          }
        } else if (selectedColor) {
          // Si hay un color seleccionado, mostrar primero las imágenes de ese color
          const colorImages = allAvailableImages.filter(img => 
            img.color && img.color.trim().toLowerCase() === selectedColor.trim().toLowerCase()
          );
          const otherImages = allAvailableImages.filter(img => 
            !img.color || img.color.trim().toLowerCase() !== selectedColor.trim().toLowerCase()
          );
          
          imagesToShow = [...colorImages, ...otherImages];
        } else {
          // Si no hay color seleccionado, mostrar todas las imágenes disponibles
          imagesToShow = allAvailableImages;
        }
        
        // Excluir la imagen principal actual de las miniaturas
        if (currentMainImage) {
          imagesToShow = imagesToShow.filter(img => img.url !== currentMainImage.url);
        }
        
        // Asegurar que hay al menos una miniatura visible si es posible
        if (imagesToShow.length === 0 && allAvailableImages.length > 1) {
          // Si no hay miniaturas para mostrar pero hay más imágenes disponibles,
          // mostrar todas excepto la principal
          imagesToShow = allAvailableImages.filter(img => 
            !currentMainImage || img.url !== currentMainImage.url
          );
        }
        
        // Crear miniaturas
        imagesToShow.forEach((image, index) => {
          const thumbnailDiv = document.createElement("div");
          thumbnailDiv.className = "thumbnail";
          
          // Agregar indicador visual si la imagen es de un color diferente al seleccionado
          if (selectedColor && image.color && 
              image.color.trim().toLowerCase() !== selectedColor.trim().toLowerCase()) {
            thumbnailDiv.classList.add("different-color");
          }
            const thumbnailImg = document.createElement("img");
          
          // Usar URL segura para la miniatura
          const safeImageUrl = image.thumbnail || image.url || `https://via.placeholder.com/150x150/1a1a1a/ffffff?text=${encodeURIComponent(image.color || 'Variant')}`;
          thumbnailImg.src = safeImageUrl;
          thumbnailImg.alt = image.color ? `Vista en ${image.color}` : `Vista ${index + 1}`;
          thumbnailImg.title = image.color ? `Ver en ${image.color}` : `Vista ${index + 1}`;
          
          // Añadir manejo de errores mejorado para miniaturas
          thumbnailImg.onerror = function() {
            let fallbackLevel = this.dataset.fallbackLevel || '';
            if (fallbackLevel !== 'final') {
              this.dataset.fallbackLevel = fallbackLevel === 'first' ? 'final' : 'first';
              const productName = encodeURIComponent(image.color || 'Variant');
              const fallbackUrl = fallbackLevel === 'first' 
                ? `https://via.placeholder.com/150x150/333333/ffffff?text=${productName}`
                : `https://via.placeholder.com/150x150/1a1a1a/ffffff?text=No+Image`;
              this.src = fallbackUrl;
            }
          };
          
          thumbnailDiv.appendChild(thumbnailImg);
          
          // Event listener para intercambiar con imagen principal
          thumbnailDiv.addEventListener("click", () => {
            // Remover clase active de miniaturas anteriores
            document.querySelectorAll(".thumbnail").forEach(thumb => {
              thumb.classList.remove("active");
            });
            
            // Agregar clase active a la miniatura seleccionada
            thumbnailDiv.classList.add("active");
            
            // Actualizar la imagen principal
            updateMainImage(image);
            
            // Si se hace clic en una imagen de diferente color, actualizar la selección de color
            if (image.color && (!selectedColor || 
                image.color.trim().toLowerCase() !== selectedColor.trim().toLowerCase())) {
              
              // Actualizar la selección visual de color
              document.querySelectorAll(".color-swatch").forEach(swatch => {
                swatch.classList.remove("selected");
                if (swatch.dataset.color && 
                    swatch.dataset.color.trim().toLowerCase() === image.color.trim().toLowerCase()) {
                  swatch.classList.add("selected");
                }
              });
              
              selectedColor = image.color;
              updateUI();
            }
          });
          
          thumbnailContainer.appendChild(thumbnailDiv);
        });
        
        // Hacer scroll horizontal suave si hay muchas miniaturas
        if (imagesToShow.length > 4) {
          thumbnailContainer.style.overflowX = "auto";
        }
      };      // Función para inicializar la galería
      const initializeGallery = () => {
        // Recopilar todas las imágenes disponibles
        allAvailableImages = collectAllImages();
        
        // Establecer imagen principal inicial
        if (allAvailableImages.length > 0) {
          // Usar la imagen del producto principal si está disponible
          let initialImage = allAvailableImages.find(img => img.url === product.thumbnail_url);
          if (!initialImage) {
            initialImage = allAvailableImages[0];
          }
          updateMainImage(initialImage);
        } else {
          // Fallback a la imagen del producto
          currentMainImage = {
            url: product.thumbnail_url,
            thumbnail: product.thumbnail_url,
            color: null,
            type: 'fallback'
          };
          updateThumbnailGallery();
        }
      };      const formatPrice = (price, currency = "EUR") => {
        // More robust currency validation
        let safeCurrency = "EUR";
        if (currency && typeof currency === 'string' && currency.trim().length === 3) {
          safeCurrency = currency.trim().toUpperCase();
        }
        
        try {
          return new Intl.NumberFormat("es-ES", {
            style: "currency",
            currency: safeCurrency
          }).format(parseFloat(price));
        } catch (error) {
          console.warn('Error formatting price with currency:', currency, 'Using EUR fallback');
          return new Intl.NumberFormat("es-ES", {
            style: "currency",
            currency: "EUR"
          }).format(parseFloat(price));
        }
      };

      // Función para actualizar la UI
      const updateUI = () => {
        const priceEl = document.getElementById("selected-price");
        const addBtn = document.getElementById("add-to-cart");

        if (!priceEl || !addBtn) {
          console.error("No se encontraron elementos UI necesarios");
          return;
        }

        // Si tenemos color y talla seleccionados, buscar la variante específica
        if (selectedColor && selectedSize) {
          const variant = variants.find(v => {
            const variantColor = v.color ? v.color.trim().toLowerCase() : "";
            const variantSize = v.size ? v.size.trim().toLowerCase() : "";
            const matchColor = variantColor === selectedColor.trim().toLowerCase();
            const matchSize = variantSize === selectedSize.trim().toLowerCase();
            
            return matchColor && matchSize;
          });

          if (variant) {            // Actualizar precio
            const price = variant.retail_price || variant.price || "0";
            const currency = variant.currency || "EUR";
            priceEl.textContent = formatPrice(price, currency);
            
            // Actualizar imagen principal con la del color seleccionado
            const colorImages = allAvailableImages.filter(img => 
              img.color && img.color.trim().toLowerCase() === selectedColor.trim().toLowerCase()
            );
            if (colorImages.length > 0) {
              // Solo cambiar la imagen si la actual no es del color seleccionado
              if (!currentMainImage || 
                  !currentMainImage.color || 
                  currentMainImage.color.trim().toLowerCase() !== selectedColor.trim().toLowerCase()) {
                updateMainImage(colorImages[0]);
              }
            }
            
            // Actualizar galería para mostrar imágenes relevantes
            updateThumbnailGallery(selectedColor);
            
            // Habilitar botón
            addBtn.disabled = false;
            addBtn.style.opacity = "1";
            addBtn.style.cursor = "pointer";          } else {
            // Mostrar precio mínimo
            const lowestPrice = Math.min(...variants.map(v => parseFloat(v.retail_price || v.price || "0")));
            priceEl.textContent = formatPrice(lowestPrice, variants[0]?.currency || "EUR");
            
            // Deshabilitar botón
            addBtn.disabled = true;
            addBtn.style.opacity = "0.5";
            addBtn.style.cursor = "not-allowed";
          }
        } else if (selectedColor && !selectedSize) {
          // Solo color seleccionado
          const colorVariants = variants.filter(v => {
            const variantColor = v.color ? v.color.trim().toLowerCase() : "";
            return variantColor === selectedColor.trim().toLowerCase();
          });          if (colorVariants.length > 0) {
            // Actualizar imagen principal con la del color seleccionado
            const colorImages = allAvailableImages.filter(img => 
              img.color && img.color.trim().toLowerCase() === selectedColor.trim().toLowerCase()
            );
            if (colorImages.length > 0) {
              // Solo cambiar la imagen si la actual no es del color seleccionado
              if (!currentMainImage || 
                  !currentMainImage.color || 
                  currentMainImage.color.trim().toLowerCase() !== selectedColor.trim().toLowerCase()) {
                updateMainImage(colorImages[0]);
              }
            }
            
            // Actualizar galería para mostrar imágenes relevantes
            updateThumbnailGallery(selectedColor);
              // Mostrar precio mínimo de todas las variantes de este color
            const lowestColorPrice = Math.min(...colorVariants.map(v => parseFloat(v.retail_price || v.price || "0")));
            priceEl.textContent = formatPrice(lowestColorPrice, colorVariants[0]?.currency || "EUR");
          }
          
          // Mantener botón deshabilitado hasta que se seleccione talla
          addBtn.disabled = true;
          addBtn.style.opacity = "0.5";
          addBtn.style.cursor = "not-allowed";        } else {
          // No hay selecciones
          // Mostrar precio mínimo
          const lowestPrice = Math.min(...variants.map(v => parseFloat(v.retail_price || v.price || "0")));
          priceEl.textContent = formatPrice(lowestPrice, variants[0]?.currency || "EUR");
          
          // Restaurar vista de galería sin filtros
          updateThumbnailGallery(null);
          
          // Deshabilitar botón
          addBtn.disabled = true;
          addBtn.style.opacity = "0.5";
          addBtn.style.cursor = "not-allowed";
        }
      };

      // Función para agregar al carrito
      const addToCart = () => {
        if (!selectedColor || !selectedSize) {
          alert("Por favor selecciona color y talla");
          return;
        }

        const variant = variants.find(v => {
          const variantColor = v.color ? v.color.trim().toLowerCase() : "";
          const variantSize = v.size ? v.size.trim().toLowerCase() : "";
          return variantColor === selectedColor.trim().toLowerCase() &&
                 variantSize === selectedSize.trim().toLowerCase();
        });        if (!variant) {
          alert("La combinación seleccionada no está disponible");
          return;
        }        // Buscar la mejor imagen disponible para el carrito
        let thumbnailUrl = variant.preview_url || variant.thumbnail_url || product.thumbnail_url;
        
        // Buscar imagen específica del color seleccionado en la galería actual
        if (selectedColor && currentMainImage && currentMainImage.color &&
            currentMainImage.color.trim().toLowerCase() === selectedColor.trim().toLowerCase()) {
          // Si la imagen principal actual es del color seleccionado, usarla
          thumbnailUrl = currentMainImage.url;
        } else if (selectedColor) {
          // Buscar imagen del color seleccionado en allAvailableImages
          const colorImage = allAvailableImages.find(img => 
            img.color && img.color.trim().toLowerCase() === selectedColor.trim().toLowerCase()
          );
          if (colorImage) {
            thumbnailUrl = colorImage.url;
          }
        }
        
        // Si no hay URL directa, buscar en files con la misma lógica
        if (!thumbnailUrl && variant.files && variant.files.length > 0) {
          // Prioridad 1: archivo de tipo 'preview'
          const previewFile = variant.files.find(f => f.type === 'preview');
          if (previewFile && previewFile.preview_url) {
            thumbnailUrl = previewFile.preview_url;
          }
          // Prioridad 2: usar thumbnail_url del archivo preview
          else if (previewFile && previewFile.thumbnail_url) {
            thumbnailUrl = previewFile.thumbnail_url;
          }
          // Prioridad 3: archivo de tipo 'default'
          else {
            const defaultFile = variant.files.find(f => f.type === 'default');
            if (defaultFile && defaultFile.thumbnail_url) {
              thumbnailUrl = defaultFile.thumbnail_url;
            } else if (defaultFile && defaultFile.preview_url) {
              thumbnailUrl = defaultFile.preview_url;
            }
          }
        }
        
        const cartItem = {
          productId: productId,
          variantId: variant.id,
          name: product.name || "",
          color: variant.color,
          size: variant.size,
          price: parseFloat(variant.retail_price || variant.price),
          quantity: 1,
          thumbnail: thumbnailUrl,
          currency: variant.currency || "EUR"
        };

        let cart = [];
        try {
          cart = JSON.parse(localStorage.getItem("cart") || "[]");
        } catch (e) {
          console.error("Error parseando carrito:", e);
        }

        const existingIndex = cart.findIndex(item => item.variantId === cartItem.variantId);
        if (existingIndex > -1) {
          cart[existingIndex].quantity += 1;
        } else {
          cart.push(cartItem);
        }        localStorage.setItem("cart", JSON.stringify(cart));

        // Dispatch custom event for cart updates
        window.dispatchEvent(new CustomEvent("cartUpdated"));        // Mostrar mensaje de confirmación
        const cartMessageEl = document.getElementById("cart-message");
        if (cartMessageEl) {
          cartMessageEl.classList.add("show");
          cartMessageEl.style.display = "flex";
          cartMessageEl.style.animation = "slideInFromRight 0.3s ease-out";
          
          setTimeout(() => {
            cartMessageEl.style.animation = "slideOutToRight 0.3s ease-in";
            setTimeout(() => {
              cartMessageEl.classList.remove("show");
              cartMessageEl.style.display = "none";
              cartMessageEl.style.animation = "";
            }, 300);
          }, 2700);
        }
      };      // Event listeners para colores
      document.querySelectorAll(".color-swatch").forEach(swatch => {
        swatch.addEventListener("click", (e) => {
          // Remover selección anterior
          document.querySelectorAll(".color-swatch").forEach(el => el.classList.remove("selected"));
          
          // Agregar selección actual
          swatch.classList.add("selected");
          selectedColor = swatch.dataset.color;
          
          // Encontrar y mostrar una imagen del color seleccionado
          const colorImages = allAvailableImages.filter(img => 
            img.color && img.color.trim().toLowerCase() === selectedColor.trim().toLowerCase()
          );
          
          if (colorImages.length > 0) {
            // Solo cambiar la imagen si la actual no es del color seleccionado
            if (!currentMainImage || 
                !currentMainImage.color || 
                currentMainImage.color.trim().toLowerCase() !== selectedColor.trim().toLowerCase()) {
              updateMainImage(colorImages[0]);
            }
          }
          
          updateUI();
        });
      });

      // Event listeners para tallas
      document.querySelectorAll(".size-option").forEach(option => {
        option.addEventListener("click", (e) => {
          // Remover selección anterior
          document.querySelectorAll(".size-option").forEach(el => el.classList.remove("selected"));
          
          // Agregar selección actual
          option.classList.add("selected");
          selectedSize = option.dataset.size;
          
          updateUI();
        });
      });

      // Event listener para el botón de agregar al carrito
      const addToCartBtn = document.getElementById("add-to-cart");
      if (addToCartBtn) {
        addToCartBtn.addEventListener("click", (e) => {
          e.preventDefault();
          addToCart();
        });
      }      // Configuración del modal para zoom de imagen
      const modalImg = document.getElementById("modal-image");
      const modalCloseElem = document.getElementById("modal-close");
      const mainImg = document.getElementById("main-product-image");
      
      if (mainImg && modal && modalImg) {
        mainImg.addEventListener("click", () => {
          modal.style.display = "flex";
          modalImg.src = currentMainImage ? currentMainImage.url : mainImg.src;
        });
      }

      if (modalCloseElem && modal) {
        modalCloseElem.addEventListener("click", () => {
          modal.style.display = "none";
        });
      }

      if (modal) {
        modal.addEventListener("click", (e) => {
          if (e.target === modal) {
            modal.style.display = "none";
          }
        });
      }      // Inicializar galería y UI
      initializeGallery();
      updateUI();
    });
  </script>
</ProductLayout>
