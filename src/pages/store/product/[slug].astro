---
import Layout from '../../../components/Layout.astro';
import "../../../styles/product-detail.scss";

// Objeto fallback para el color.
const colorMap = {
  "white": "#FFFFFF",
  "black": "#000000",
  "navy": "#000080",
  "purple": "#800080",
  "red": "#FF0000",
  "royal": "#4169E1",
  "charcoal": "#36454F",
  "heliconia": "#F77F00",
  "irish green": "#008000",
  "rs sport grey": "#A9A9A9",
  "azalea": "#F3C5D5"
};

// getStaticPaths utiliza solo PRINTFUL_ACCESS_TOKEN.
export async function getStaticPaths() {
  const slugify = (str) =>
    str
      .trim()
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/(^-|-$)/g, '');
  const { PRINTFUL_API_BASE, PRINTFUL_ACCESS_TOKEN } = import.meta.env;
  if (!PRINTFUL_API_BASE || !PRINTFUL_ACCESS_TOKEN) return [];
  try {
    const response = await fetch(`${PRINTFUL_API_BASE}store/products`, {
      headers: {
        "Authorization": `Bearer ${PRINTFUL_ACCESS_TOKEN}`,
        "Content-Type": "application/json"
      }
    });
    const data = await response.json();
    return data.result.map((product) => ({
      params: { slug: `${product.id}-${slugify(product.name)}` }
    }));
  } catch (error) {
    console.error("Error generando rutas estáticas:", error);
    return [];
  }
}

const { slug } = Astro.params;
const productId = slug.split('-')[0];

const { PRINTFUL_API_BASE, PRINTFUL_ACCESS_TOKEN } = import.meta.env;
if (!PRINTFUL_API_BASE || !PRINTFUL_ACCESS_TOKEN)
  throw new Error(".env incompleto");

const formatEuro = (value, currency = "EUR") =>
  new Intl.NumberFormat("es-ES", { style: "currency", currency }).format(value);

// Función para obtener variante enriquecida (GET /products/variant/{id}).
async function getVariantComplete(id) {
  console.log("Llamada a getVariantComplete para id:", id);
  try {
    const res = await fetch(`${PRINTFUL_API_BASE}products/variant/${id}`, {
      headers: {
        "Authorization": `Bearer ${PRINTFUL_ACCESS_TOKEN}`,
        "Content-Type": "application/json"
      }
    });
    const json = await res.json();
    console.log("Respuesta de getVariantComplete para id:", id, "json:", json);
    if (json && json.code === 200 && json.result && json.result.variant) {
      return json.result.variant;
    }
    console.error("Respuesta inesperada para variante", id, json);
    return undefined;
  } catch (error) {
    console.error("Error en getVariantComplete:", error);
    return undefined;
  }
}

let product = null;
try {
  console.log("Obteniendo producto con id:", productId);
  const res = await fetch(`${PRINTFUL_API_BASE}store/products/${productId}`, {
    headers: {
      "Authorization": `Bearer ${PRINTFUL_ACCESS_TOKEN}`,
      "Content-Type": "application/json"
    }
  });
  const data = await res.json();
  console.log("Respuesta del producto:", data);
  product = data.result?.sync_product || null;
  if (product) {
    const basicVariants = data.result.sync_variants || [];
    product.sync_variants = basicVariants; // Guardamos fallback.
    product.variants = await Promise.all(
      basicVariants.map(async (variant) => {
        const idToUse = variant.variant_id ? variant.variant_id : variant.id;
        const fullVariant = await getVariantComplete(idToUse);
        return fullVariant
          ? { ...fullVariant, retail_price: variant.retail_price, price: variant.price }
          : variant;
      })
    );
    if (!product.variants.length && basicVariants.length) {
      console.log("Producto.variants vacío; usando basicVariants como fallback");
      product.variants = basicVariants;
    }
    console.log("Producto final con variantes:", product);
    console.log("JSON de variantes a inyectar:", JSON.stringify(product.variants || []));
  }
} catch (error) {
  console.error("Error obteniendo producto:", error);
}

let uniqueColorVariants = [];
let uniqueSizes = [];
if (product?.variants?.length) {
  const colorDict = {};
  const sizeSet = new Set();
  product.variants.forEach(v => {
    if (v.color) {
      const key = v.color.trim().toLowerCase();
      if (!colorDict[key]) colorDict[key] = v;
    }
    if (v.size) sizeSet.add(v.size.trim());
  });
  uniqueColorVariants = Object.values(colorDict);
  uniqueSizes = Array.from(sizeSet);
}
---
<Layout>
  <section class="product-detail">
    <div class="container">
      {product ? (
        <>
          <div class="product-header">
            <h1 class="product-title">{product.name}</h1>
            {product.description && <p class="product-description">{product.description}</p>}
          </div>
          <div class="product-flex">
            <div class="image-container">
              {product.thumbnail_url && (
                <img id="main-product-image" src={product.thumbnail_url} alt={product.name} />
              )}
            </div>
            <aside class="options-sidebar">
              {uniqueColorVariants.length > 0 && (
                <div class="option-group colors">
                  <h2>Color</h2>
                  <div class="color-options">
                    {uniqueColorVariants.map(variant => (
                      <div
                        class="color-swatch"
                        data-color={variant.color}
                        style={{
                          backgroundColor: variant.color_code
                            ? variant.color_code
                            : (colorMap[variant.color.toLowerCase()] || variant.color)
                        }}
                        title={variant.color}>
                      </div>
                    ))}
                  </div>
                </div>
              )}
              {uniqueSizes.length > 0 && (
                <div class="option-group sizes">
                  <h2>Size</h2>
                  <div class="size-options">
                    {uniqueSizes.map(size => (
                      <div class="size-option" data-size={size}>
                        {size}
                      </div>
                    ))}
                  </div>
                </div>
              )}
              <div class="price-display">
                <span id="selected-price">
                  {product.variants.length > 0 &&
                    formatEuro(
                      Math.min(...product.variants.map(v => parseFloat(v.retail_price || v.price || "0"))),
                      product.variants[0].currency || "EUR"
                    )}
                </span>
              </div>
              <button id="add-to-cart" class="add-to-cart" disabled>Add to Cart</button>
              <!-- Mensaje de confirmación -->
              <div id="cart-message" style="display: none; margin-top: 10px; color: green; font-weight: bold;">
                Producto añadido al carrito!
              </div>
            </aside>
          </div>
          <!-- Inyectamos variantes y producto en un JSON (forzado a usar fallback si es necesario) -->
          <script id="variants-data" type="application/json">{JSON.stringify((product.variants && product.variants.length) ? product.variants : (product.sync_variants || []))}</script>
          <script id="product-data" type="application/json">{JSON.stringify(product)}</script>
        </>
      ) : (
        <p>Producto no encontrado.</p>
      )}
    </div>
  </section>
  
  <div id="modal" class="modal">
    <span id="modal-close" class="modal-close">&times;</span>
    <img class="modal-content" id="modal-image" alt="Enlarged Image" />
  </div>
  
  <script type="module">
    document.addEventListener("DOMContentLoaded", () => {
      // Configuración del modal
      const modal = document.getElementById("modal");
      if (modal) modal.style.display = "none";
  
      // Recuperar variantes desde la etiqueta "variants-data"
      const variantsDataEl = document.getElementById("variants-data");
      let variants = [];
      if (variantsDataEl) {
        try {
          variants = JSON.parse(variantsDataEl.textContent.trim());
          console.log("Variantes parseadas desde 'variants-data' (length:", variants.length, "):", variants);
        } catch (e) {
          console.error("Error parseando JSON de variantes", e);
        }
      }
  
      // Recuperar producto desde la etiqueta "product-data"
      let product = {};
      const productDataEl = document.getElementById("product-data");
      if (productDataEl) {
        try {
          product = JSON.parse(productDataEl.textContent.trim());
          console.log("Producto parseado desde 'product-data':", product);
        } catch (e) {
          console.error("Error parseando JSON de producto", e);
        }
      }
  
      // Fallback: si variants es vacío, usar product.sync_variants si existe.
      if (!variants.length && product.sync_variants && product.sync_variants.length) {
        variants = product.sync_variants;
        console.log("Usando product.sync_variants como fallback. Variantes (length:", variants.length, "):", variants);
      }
  
      console.log("Producto cargado:", product, "Variantes finales (length:", variants.length, "):", variants);
  
      let selectedColor = null, selectedSize = null;
  
      const updateUI = () => {
        try {
          console.log("updateUI INICIO: color:", selectedColor, "talla:", selectedSize);
          const priceEl = document.getElementById("selected-price");
          const imgEl = document.getElementById("main-product-image");
          console.log("updateUI: Elementos UI: priceEl:", priceEl, "imgEl:", imgEl);
          console.log("updateUI: Variantes disponibles (length:", variants.length, "):", variants);
          if (!variants.length) { 
            console.log("No hay variantes disponibles");
            return; 
          }
  
          if (selectedColor && selectedSize) {
            console.log("Buscando variante para:", selectedColor, selectedSize);
            const variant = variants.find(v => {
              const variantColor = v.color ? v.color.trim().toLowerCase() : "";
              const variantSize = v.size ? v.size.trim().toLowerCase() : "";
              console.log("updateUI - Comparando variante: color:", variantColor, "talla:", variantSize);
              return variantColor === selectedColor.trim().toLowerCase() &&
                     variantSize === selectedSize.trim().toLowerCase();
            });
            console.log("updateUI - Resultado de búsqueda:", variant);
            if (variant && imgEl && priceEl) {
              console.log("updateUI - Variante encontrada, actualizando precio e imagen.");
              priceEl.textContent = new Intl.NumberFormat("es-ES", {
                style: "currency",
                currency: variant.currency || "EUR"
              }).format(parseFloat(variant.retail_price));
              imgEl.src = variant.thumbnail_url;
            } else {
              console.log("updateUI - No se encontró variante específica, usando precio mínimo.");
              const lowestPrice = Math.min(...variants.map(v => parseFloat(v.retail_price || v.price || "0")));
              priceEl.textContent = new Intl.NumberFormat("es-ES", {
                style: "currency",
                currency: variants[0].currency || "EUR"
              }).format(lowestPrice);
            }
          } else {
            console.log("updateUI - Combinación incompleta, mostrando precio mínimo.");
            const lowestPrice = Math.min(...variants.map(v => parseFloat(v.retail_price || v.price || "0")));
            priceEl.textContent = new Intl.NumberFormat("es-ES", {
              style: "currency",
              currency: variants[0].currency || "EUR"
            }).format(lowestPrice);
          }
  
          const addBtn = document.getElementById("add-to-cart");
          if (selectedColor && selectedSize) {
            addBtn.disabled = false;
            addBtn.style.opacity = 1;
          } else {
            addBtn.disabled = true;
            addBtn.style.opacity = 0.5;
          }
          console.log("updateUI FINALIZADO: color:", selectedColor, "talla:", selectedSize);
        } catch (error) {
          console.error("Error en updateUI:", error);
        }
      };
  
      // Función para agregar al carrito.
      const addToCart = () => {
        if (!selectedColor || !selectedSize) return;
  
        const variant = variants.find(v => {
          const variantColor = v.color ? v.color.trim().toLowerCase() : "";
          const variantSize = v.size ? v.size.trim().toLowerCase() : "";
          return variantColor === selectedColor.trim().toLowerCase() &&
                 variantSize === selectedSize.trim().toLowerCase();
        });
  
        if (!variant) {
          alert("La combinación seleccionada no existe.");
          return;
        }
  
        const cartItem = {
          productId: productId,
          variantId: variant.id,
          name: document.querySelector(".product-title")?.textContent || "",
          color: variant.color,
          size: variant.size,
          price: parseFloat(variant.retail_price || variant.price),
          quantity: 1,
          thumbnail: variant.thumbnail_url,
          currency: variant.currency || "EUR"
        };
  
        console.log("addToCart - Añadiendo al carrito:", cartItem);
  
        let cart = [];
        try {
          cart = JSON.parse(localStorage.getItem("cart") || "[]");
          console.log("addToCart - Carrito previo:", cart);
        } catch (e) {
          console.error("Error parseando carrito:", e);
        }
  
        const existingIndex = cart.findIndex(item => item.variantId === cartItem.variantId);
        if (existingIndex > -1) {
          cart[existingIndex].quantity += 1;
        } else {
          cart.push(cartItem);
        }
  
        localStorage.setItem("cart", JSON.stringify(cart));
        console.log("addToCart - Carrito actualizado:", cart);
  
        const cartMessageEl = document.getElementById("cart-message");
        if (cartMessageEl) {
          cartMessageEl.style.display = "block";
          setTimeout(() => {
            cartMessageEl.style.display = "none";
          }, 3000);
        }
      };
  
      // Eventos para selección de color.
      document.querySelectorAll(".color-swatch").forEach(swatch => {
        swatch.addEventListener("click", () => {
          document.querySelectorAll(".color-swatch").forEach(el => el.classList.remove("selected"));
          swatch.classList.add("selected");
          selectedColor = swatch.dataset.color;
          console.log("Color seleccionado:", selectedColor);
          updateUI();
        });
      });
  
      // Eventos para selección de talla.
      document.querySelectorAll(".size-option").forEach(opt => {
        opt.addEventListener("click", () => {
          document.querySelectorAll(".size-option").forEach(el => el.classList.remove("selected"));
          opt.classList.add("selected");
          selectedSize = opt.dataset.size;
          console.log("Talla seleccionada:", selectedSize);
          updateUI();
        });
      });
  
      updateUI();
  
      document.getElementById("add-to-cart").addEventListener("click", () => {
        console.log("Botón 'Add to Cart' presionado");
        addToCart();
      });
  
      const modalImg = document.getElementById("modal-image");
      const modalCloseElem = document.getElementById("modal-close");
      const mainImg = document.getElementById("main-product-image");
      if (mainImg) {
        mainImg.addEventListener("click", () => {
          modal.style.display = "flex";
          modalImg.src = mainImg.src;
        });
      }
  
      if (modalCloseElem) {
        modalCloseElem.addEventListener("click", () => {
          modal.style.display = "none";
        });
      }
  
      if (modal) {
        modal.addEventListener("click", (e) => {
          if (e.target === modal) {
            modal.style.display = "none";
          }
        });
      }
    });
  </script>
</Layout>
