---
import Layout from '../components/Layout.astro';
import '../styles/subscribe.scss';
import { getBaseUrl } from '../utils/base-url';

// Get the correct base URL for the environment
const baseUrl = getBaseUrl();
---

<Layout title="Subscribe - Rave Revolution Beats">
  <main class="subscribe-page">
    <div class="container">
      <div class="subscribe-header">
        <h1>Join the Revolution</h1>
        <p>Get exclusive access to unreleased tracks, early event tickets, and behind-the-scenes content.</p>
      </div>
      
      <div class="subscribe-content">
        <div class="benefits-section">
          <h2>What You'll Get</h2>
          <div class="benefits-grid">
            <div class="benefit-card">
              <div class="benefit-icon">
                <svg viewBox="0 0 24 24" fill="none">
                  <path d="M9 18V5l12-2v13M9 18l-7 2V7l7-2M9 18V5M9 9l12-2" stroke="currentColor" stroke-width="2"/>
                </svg>
              </div>
              <h3>Exclusive Tracks</h3>
              <p>Access to unreleased music and subscriber-only remixes</p>
            </div>
            
            <div class="benefit-card">
              <div class="benefit-icon">
                <svg viewBox="0 0 24 24" fill="none">
                  <path d="M8 2v4M16 2v4M3 10h18M5 4h14a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2z" stroke="currentColor" stroke-width="2"/>
                </svg>
              </div>
              <h3>Early Access</h3>
              <p>First dibs on event tickets and merchandise drops</p>
            </div>
            
            <div class="benefit-card">
              <div class="benefit-icon">
                <svg viewBox="0 0 24 24" fill="none">
                  <path d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z" stroke="currentColor" stroke-width="2"/>
                </svg>
              </div>
              <h3>Community Access</h3>
              <p>Join our private Discord server and connect with fellow ravers</p>
            </div>
            
            <div class="benefit-card">
              <div class="benefit-icon">
                <svg viewBox="0 0 24 24" fill="none">
                  <path d="M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z" stroke="currentColor" stroke-width="2"/>
                </svg>
              </div>
              <h3>Behind the Scenes</h3>
              <p>Studio sessions, production insights, and artist interviews</p>
            </div>
          </div>
        </div>
        
        <div class="subscription-form-section">
          <div class="form-container">
            <h2>Ready to Join?</h2>
            <p>Choose your subscription level and become part of the revolution.</p>
            
            <div class="subscription-tiers">
              <div class="tier" data-tier="free">
                <div class="tier-header">
                  <h3>Free</h3>
                  <div class="price">$0<span>/month</span></div>
                </div>
                <ul class="tier-features">
                  <li>Monthly newsletter</li>
                  <li>Basic community access</li>
                  <li>Free track downloads</li>
                </ul>
                <button class="tier-btn" data-tier="free">Get Started</button>
              </div>
              
              <div class="tier featured" data-tier="premium">
                <div class="tier-badge">Most Popular</div>
                <div class="tier-header">
                  <h3>Premium</h3>
                  <div class="price">$9.99<span>/month</span></div>
                </div>
                <ul class="tier-features">
                  <li>Everything in Free</li>
                  <li>Exclusive tracks monthly</li>
                  <li>Early event access</li>
                  <li>Discord VIP channel</li>
                  <li>Live stream access</li>
                </ul>
                <button class="tier-btn" data-tier="premium">Join Premium</button>
              </div>
              
              <div class="tier" data-tier="vip">
                <div class="tier-header">
                  <h3>VIP</h3>
                  <div class="price">$19.99<span>/month</span></div>
                </div>
                <ul class="tier-features">
                  <li>Everything in Premium</li>
                  <li>Personal meet & greets</li>
                  <li>Custom merchandise</li>
                  <li>Studio visit opportunities</li>
                  <li>1-on-1 producer sessions</li>
                </ul>
                <button class="tier-btn" data-tier="vip">Go VIP</button>
              </div>
            </div>
            
            <form class="detailed-subscribe-form" id="detailedSubscribeForm" style="display: none;">
              <h3>Complete Your Subscription</h3>
              <div class="form-grid">
                <input type="text" placeholder="First Name" required>
                <input type="text" placeholder="Last Name" required>
                <input type="email" placeholder="Email Address" required>
                <input type="tel" placeholder="Phone (Optional)">
              </div>
                <div class="form-row">
                <label class="checkbox-label">
                  <input type="checkbox" required>
                  <span>I agree to the <a href={`${baseUrl}terms/`}>Terms of Service</a> and <a href={`${baseUrl}privacy/`}>Privacy Policy</a></span>
                </label>
              </div>
              
              <div class="form-row">
                <label class="checkbox-label">
                  <input type="checkbox">
                  <span>Send me updates about events and merchandise</span>
                </label>
              </div>
              
              <button type="submit" class="submit-btn">
                <span>Complete Subscription</span>
                <svg class="btn-icon" viewBox="0 0 24 24" fill="none">
                  <path d="M5 12h14m-7-7l7 7-7 7" stroke="currentColor" stroke-width="2"/>
                </svg>
              </button>
            </form>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Success Modal -->
    <div id="successModal" class="modal">
      <div class="modal-content">
        <div class="success-content">
          <div class="success-icon">
            <svg viewBox="0 0 24 24" fill="none">
              <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" stroke="currentColor" stroke-width="2"/>
            </svg>
          </div>
          <h2>Welcome to the Revolution!</h2>
          <p>Your subscription is confirmed. Check your email for next steps.</p>
          <button class="close-modal">Continue</button>
        </div>
      </div>
    </div>
    
    <!-- Notification -->
    <div id="notification" class="notification"></div>
  </main>
</Layout>

<script define:vars={{ baseUrl }}>
  document.addEventListener('DOMContentLoaded', function() {
    const tierButtons = document.querySelectorAll('.tier-btn');
    const detailedForm = document.getElementById('detailedSubscribeForm');
    const form = document.getElementById('detailedSubscribeForm');
    const modal = document.getElementById('successModal');
    const notification = document.getElementById('notification');
    let selectedTier = '';
      // Handle tier selection
    tierButtons.forEach(btn => {
      btn.addEventListener('click', function(this: HTMLButtonElement) {
        selectedTier = this.dataset.tier || '';
        
        // Update form title
        const formTitle = detailedForm?.querySelector('h3');
        if (formTitle) {
          formTitle.textContent = `Complete Your ${selectedTier.charAt(0).toUpperCase() + selectedTier.slice(1)} Subscription`;
        }
        
        // Show form
        if (detailedForm) {
          detailedForm.style.display = 'block';
          detailedForm.scrollIntoView({ behavior: 'smooth' });
        }
        
        // Update button states
        tierButtons.forEach(b => b.classList.remove('selected'));
        this.classList.add('selected');
      });
    });
      // Handle form submission
    form?.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const submitBtn = form.querySelector('.submit-btn') as HTMLButtonElement;
      const originalText = submitBtn?.innerHTML;
      
      // Show loading
      if (submitBtn) {
        submitBtn.innerHTML = '<span>Processing...</span>';
        submitBtn.disabled = true;
      }
      
      try {
        // Simulate API call
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Store subscription data
        const formData = new FormData(form as HTMLFormElement);
        const subscriptionData = {
          tier: selectedTier,
          email: formData.get('email'),
          firstName: formData.get('firstName'),
          lastName: formData.get('lastName'),
          phone: formData.get('phone'),
          timestamp: new Date().toISOString()
        };
        
        // Store in localStorage (in real app, would send to backend)
        const subscriptions = JSON.parse(localStorage.getItem('subscriptions') || '[]');
        subscriptions.push(subscriptionData);
        localStorage.setItem('subscriptions', JSON.stringify(subscriptions));
        
        // Show success modal
        modal?.classList.add('show');
        
      } catch (error) {
        showNotification('Something went wrong. Please try again.', 'error');
      } finally {
        // Reset button
        if (submitBtn && originalText) {
          submitBtn.innerHTML = originalText;
          submitBtn.disabled = false;
        }
      }
    });
      // Handle modal close
    document.querySelector('.close-modal')?.addEventListener('click', function() {
      modal?.classList.remove('show');
      // Redirect to home or dashboard
      window.location.href = baseUrl;
    });
    
    // Close modal on backdrop click
    modal?.addEventListener('click', function(e) {
      if (e.target === modal) {
        modal.classList.remove('show');
        window.location.href = baseUrl;
      }
    });
      function showNotification(message: string, type: string = 'info') {
      if (!notification) return;
      
      notification.textContent = message;
      notification.className = `notification ${type} show`;
      
      setTimeout(() => {
        notification.classList.remove('show');
      }, 4000);
    }
  });
</script>
</Layout>
