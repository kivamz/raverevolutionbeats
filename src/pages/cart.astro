---
import Layout from '../components/Layout.astro';
import '../styles/cart.scss';

// Force the correct base URL for production
const baseUrl = '/raverevolutionbeats/';
---

<Layout>
  <section class="cart-page">
    <div class="container">
      <h1>Shopping Cart</h1>
      
      <div class="cart-container">
        <div class="cart-items-section">
          <div id="cart-items-list" class="cart-items-list">
            <!-- Cart items will be populated by JavaScript -->
          </div>
          
          <div id="empty-cart-message" class="empty-cart-message">
            <svg width="80" height="80" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M3 3H5L5.4 5M7 13H17L21 5H5.4M7 13L5.4 5M7 13L4.7 15.3C4.3 15.7 4.6 16.5 5.1 16.5H17M17 13V16.5M9 19.5A1.5 1.5 0 1 1 12 19.5A1.5 1.5 0 0 1 9 19.5ZM20 19.5A1.5 1.5 0 1 1 17 19.5A1.5 1.5 0 0 1 20 19.5Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
            <h2>Your cart is empty</h2>
            <p>Add some products to get started!</p>
            <a href={`${baseUrl}store/`} class="shop-now-btn">Shop Now</a>
          </div>
        </div>
        
        <div class="cart-summary">
          <div class="summary-content">
            <h3>Order Summary</h3>
            
            <div class="summary-row">
              <span>Subtotal:</span>
              <span id="cart-subtotal">0.00€</span>
            </div>
            
            <div class="summary-row">
              <span>Shipping:</span>
              <span id="cart-shipping">Free</span>
            </div>
            
            <div class="summary-row">
              <span>Tax:</span>
              <span id="cart-tax">0.00€</span>
            </div>
            
            <div class="summary-divider"></div>
            
            <div class="summary-row total">
              <span>Total:</span>
              <span id="cart-total">0.00€</span>
            </div>
            
            <div class="cart-actions">
              <button id="checkout-btn" class="checkout-btn" disabled>
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M9 12L11 14L15 10M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                Proceed to Checkout
              </button>
              
              <button id="clear-cart-btn" class="clear-cart-btn">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M3 6H5H21M8 6V4C8 3.46957 8.21071 2.96086 8.58579 2.58579C8.96086 2.21071 9.46957 2 10 2H14C14.5304 2 15.0391 2.21071 15.4142 2.58579C15.7893 2.96086 16 3.46957 16 4V6M19 6V20C19 20.5304 18.7893 21.0391 18.4142 21.4142C18.0391 21.7893 17.5304 22 17 22H7C6.46957 22 5.96086 21.7893 5.58579 21.4142C5.21071 21.0391 5 20.5304 5 20V6H19Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                Clear Cart
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    console.log('Cart page loading...');
    
    const cartItemsList = document.getElementById('cart-items-list');
    const emptyCartMessage = document.getElementById('empty-cart-message');
    const cartSubtotal = document.getElementById('cart-subtotal');
    const cartTax = document.getElementById('cart-tax');
    const cartTotal = document.getElementById('cart-total');
    const checkoutBtn = document.getElementById('checkout-btn');
    const clearCartBtn = document.getElementById('clear-cart-btn');

    function getCart() {
      try {
        const cart = localStorage.getItem('cart');
        return cart ? JSON.parse(cart) : [];
      } catch (error) {
        console.error('Error getting cart:', error);
        return [];
      }
    }

    function saveCart(cart) {
      try {
        localStorage.setItem('cart', JSON.stringify(cart));
        window.dispatchEvent(new CustomEvent('cartUpdated', { detail: cart }));
      } catch (error) {
        console.error('Error saving cart:', error);
      }
    }

    function updateCartPage() {
      console.log('Updating cart page...');
      const cart = getCart();
      const isEmpty = cart.length === 0;
      
      if (cartItemsList && emptyCartMessage) {
        if (isEmpty) {
          cartItemsList.style.display = 'none';
          emptyCartMessage.style.display = 'flex';
        } else {
          cartItemsList.style.display = 'block';
          emptyCartMessage.style.display = 'none';
          renderCartItems(cart);
        }
      }
      
      updateTotals(cart);
      
      if (checkoutBtn) {
        checkoutBtn.disabled = isEmpty;
      }
    }    function renderCartItems(cart) {
      if (!cartItemsList) return;
      
      cartItemsList.innerHTML = cart.map((item, index) => `
        <div class="cart-item">
          <img src="${item.thumbnail || item.image || 'https://placehold.co/120x120/333/fff?text=No+Image'}" alt="${item.name}" class="item-image">
          <div class="item-details">
            <h3>${item.name}</h3>
            <p class="item-variant">${item.color || ''} ${item.size ? '- ' + item.size : ''}</p>
            <p class="item-price">€${item.price.toFixed(2)} each</p>
          </div>
          <div class="item-controls">
            <div class="quantity-controls">
              <button onclick="changeQuantity(${index}, -1)" class="qty-btn qty-decrease" ${item.quantity <= 1 ? 'disabled' : ''}>
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M5 12H19" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
              </button>
              <span class="quantity-display">${item.quantity}</span>
              <button onclick="changeQuantity(${index}, 1)" class="qty-btn qty-increase">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M12 5V19M5 12H19" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
              </button>
            </div>
            <div class="item-total">€${(item.price * item.quantity).toFixed(2)}</div>
            <button onclick="removeItem(${index})" class="remove-btn" title="Remove item">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M3 6H5H21M8 6V4C8 3.46957 8.21071 2.96086 8.58579 2.58579C8.96086 2.21071 9.46957 2 10 2H14C14.5304 2 15.0391 2.21071 15.4142 2.58579C15.7893 2.96086 16 3.46957 16 4V6M19 6V20C19 20.5304 18.7893 21.0391 18.4142 21.4142C18.0391 21.7893 17.5304 22 17 22H7C6.46957 22 5.96086 21.7893 5.58579 21.4142C5.21071 21.0391 5 20.5304 5 20V6H19Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </button>
          </div>
        </div>
      `).join('');
    }function updateTotals(cart) {
      const subtotal = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
      const tax = subtotal * 0.1;
      const total = subtotal + tax;
      
      if (cartSubtotal) cartSubtotal.textContent = `€${subtotal.toFixed(2)}`;
      if (cartTax) cartTax.textContent = `€${tax.toFixed(2)}`;
      if (cartTotal) cartTotal.textContent = `€${total.toFixed(2)}`;
    }

    // Global functions for cart actions
    window.changeQuantity = function(index, change) {
      const cart = getCart();
      if (cart[index]) {
        cart[index].quantity += change;
        if (cart[index].quantity <= 0) {
          cart.splice(index, 1);
        }
        saveCart(cart);
        updateCartPage();
      }
    };

    window.removeItem = function(index) {
      const cart = getCart();
      cart.splice(index, 1);
      saveCart(cart);
      updateCartPage();
    };

    // Event listeners
    if (checkoutBtn) {
      checkoutBtn.addEventListener('click', () => {
        alert('Checkout functionality will be implemented soon!');
      });
    }

    if (clearCartBtn) {
      clearCartBtn.addEventListener('click', () => {
        if (confirm('Are you sure you want to clear your cart?')) {
          localStorage.removeItem('cart');
          window.dispatchEvent(new CustomEvent('cartUpdated', { detail: [] }));
          updateCartPage();
        }
      });
    }

    // Listen for cart updates
    window.addEventListener('cartUpdated', updateCartPage);

    // Initial load
    updateCartPage();
    console.log('Cart page initialized successfully');
  });
</script>